<?php

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function eventspace_authentication_help($path, $arg) {
  switch ($path) {
    case "admin/help#eventspace_authentication":
      return '<p>'.  t("Authenticates users to the EventSpace service") .'</p>';
      break;
  }
} 

/**
 * Implements hook_menu().
 */
function eventspace_authentication_menu() {
  $items = array();  

  $items['admin/config/system/eventspace_authentication'] = array(
    'title' => 'EventSpace Authentication',
    'description' => 'Configuration for EventSpace Authentication module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventspace_authentication_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
} 

/**
 * Form function, called by drupal_get_form() 
 * in eventspace_authentication_menu().
 */
function eventspace_authentication_form($form, &$form_state) {
  $form['eventspace_authentication_rest_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL of the REST server'),
    '#default_value' => variable_get('eventspace_authentication_rest_url'),
    '#size' => 80,
    '#maxlength' => 255,
    '#description' => t('The URL of the REST server where the EventSpace REST API is hosted.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}


/**
 * Implements hook_form_user_login_block_alter().
 */
function eventspace_authentication_form_user_login_block_alter(&$form, &$form_state) {
	_eventspace_authentication_user_login_form_alter($form, $form_state);
}

/**
 * Implements hook_form_user_login_alter().
 */

function eventspace_authentication_form_user_login_alter(&$form, &$form_state) {
    _eventspace_authentication_user_login_form_alter($form, $form_state);
}

/**
 * Implements hook_form_user_login_alter().
 */

 function _eventspace_authentication_user_login_form_alter(&$form, &$form_state) {
    $saveForm = $form;

    $form = array();

    // overrides Drupals default validator
    foreach( $saveForm as $key => $value ) {
        if( $key == '#validate' ) {
            $form[ $key ] = array();
            foreach( $value as $validator ) {
                if( $validator == 'user_login_authenticate_validate' ) {
                    $validator = 'eventspace_authentication_authenticate_validate';
                } 
                $form[ $key ][] = $validator;
            }
        } else {
            $form[ $key ] = $value;
        }
    }
}

/**
 * Custom validation method 
 */

function eventspace_authentication_authenticate_validate( $form, &$form_state ) {
    $name = $form_state[ 'values' ][ 'name' ];
    $pass = $form_state[ 'values' ][ 'pass' ];

    if( $name == 'smrtrental' )
    {
        return user_login_authenticate_validate( $form, $form_state );
    }

    $authenticated = eventspace_authentication_method($name, $pass);

    if ($authenticated)entry. If they don't exist they are added
        user_external_login_register($name, "eventspace_authorization");

        // we must set the 'uid' to pass back.  this looks up the logged in user and sets the Drupal UID
        $account = user_external_load($name);
        $form_state['uid'] = $account->uid;
    }
    else
    {
        // do nothing, Drupal will handle the errors

    }
}

    {
        // this sets up the external user with Drupal by creating a local 
/**
 * external authentication method 
 */

function eventspace_authentication_method( $username, $password) {
    require_once 'libraries/pest/PestXML.php';
    // fetch the URL
    $rest_url = variable_get('eventspace_authentication_rest_url');
    
    // create the client
    $client = new Pest($rest_url);
    $client->setupAuth($username, $password);
    
    // do a POST to see if we've got the right username + password
    try {
        $owner_url = $client->post('owners/login', '');
    } 
    catch (Exception $e) {
      return false;
    }
    // success
    return true;
}